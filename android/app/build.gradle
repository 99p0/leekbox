def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException(
            "Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33 // flutter.compileSdkVersion
    ndkVersion "25.1.8937393" // flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    // 构架多个不同架构的 apk 包
    splits {
        abi {
            boolean isReleaseTask = gradle.startParameter.taskNames.any { it.contains("Release") }
            // Enables building multiple APKs per ABI.
            enable isReleaseTask
            // 是否生成通用的apk，也就是包含所有ABI的apk。如果设为 true，那么除了按 ABI 生成的 APK 之外，Gradle 还会生成一个通用 APK。
            universalApk false
            // 所以使用reset()清空所有的ABI，再使用include指定我们想要生成的架构armeabi-v7a、arm-v8a
            reset()
            // 逗号分隔列表的形式指定 Gradle 应针对哪些 ABI 生成 APK。只与 reset() 结合使用，以指定确切的 ABI 列表。
            include 'armeabi-v7a', 'arm64-v8a'
        }
    }

    defaultConfig {
        applicationId "com.xnxq.leekbox"
        minSdkVersion 22 //flutter.minSdkVersion
        targetSdkVersion 33 // flutter.targetSdkVersion

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // 添加多 dex分包支持
        multiDexEnabled true
        // 打出的 apk 包含多个架构的 so库 需要下面的配置：
//        ndk {
        //选择要添加的对应cpu类型的.so库。
//            setAbiFilters(['armeabi-v7a', 'arm64-v8a'])

        // 还可以添加
        // 'arm64-v8a', 64 bit ARM architecture,it can use v7 version unless you are too much concerned about performance
        // mips,mips64, There are no devices with MIPS
        //  x86_64, No android devices and anyway it can use X86 version
        //  armeabi, very old architecture. Unsupported after Android 4.4
        // 'x86', Intel based devices
//        }
    }
    //
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    //
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release

            shrinkResources true //启用 R8 的资源缩减功能
            minifyEnabled true //启用 R8 的代码缩减功能
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /** 版本号
     * debug :: 1.0.78.170427.153740.8fe425
     * release :: 1.0.78.170427.8fe425
     * 解析：
     *    大版本号 ： 1 （手动）
     *    小版本号 ：0 （手动）
     *    修改版本号：78 （自动，git 提交次数）
     *    编译日期： 170427（自动，年月日）, 153740 (自动，时分秒)
     *    提交记录： 8fe425 (自动，git 最后一次提交记录后6位)
     */
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            project.ext { appName = "leekbox" }

            def outputFile = output.outputFile
            def type = variant.buildType.name
            def channel = variant.flavorName
            def abi = ""
            if (output.getFilters() != null && output.getFilters().size() > 0) {
                abi = "-" + output.getFilters().get(0).getIdentifier()
            }
//            def abi = output.getFilter(com.android.build.OutputFile.ABI)
//            if (abi == null) abi = "all"

            if (variant.buildType.name == 'release') {
                def versionName = getVersionName(false, flutterVersionName)
                output.versionNameOverride = versionName
                def apkName = "${appName}-${type}-v${versionName}_${abi}_${channel}.apk"
                output.outputFileName = new File(outputFile.parent, apkName).name
            } else {
                def versionName = getVersionName(true, flutterVersionName)
                output.versionNameOverride = versionName
                def apkName = "${appName}-${type}-v${versionName}_${abi}_${channel}.apk"
                output.outputFileName = new File(outputFile.parent, apkName).name
            }
        }
    }

    // others...
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

// 获取 version name
def getVersionName(boolean isDebug, String flutterVersionName) {
    String version = flutterVersionName +
            getRevisionNumber()
    String today = new Date().format('yyMMdd', TimeZone.getTimeZone("GMT+08:00"))
    if (isDebug) {
        String time = new Date().format('HHmmss', TimeZone.getTimeZone("GMT+08:00"))
        return version + ".$today.$time." + getRevisionDescription()
    }
    return version + ".$today." + getRevisionDescription()
}

// 获取修订版本 git 提交次数
static def getRevisionNumber() {
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    return process.getText().toInteger()
}

// 获取修订版本最后一次 git 记录后6位
static def getRevisionDescription() {
    String desc = 'git describe --always'.execute().getText().trim()
    return (desc == null || desc.size() == 0) ? new Date().format("yyMMdd") : desc.substring(desc.size() - 6)
}
